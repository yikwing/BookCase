package com.rongyi.bookcase.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_DAO_BEAN".
*/
public class BookDaoBeanDao extends AbstractDao<BookDaoBean, Long> {

    public static final String TABLENAME = "BOOK_DAO_BEAN";

    /**
     * Properties of entity BookDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookImg = new Property(1, String.class, "bookImg", false, "BOOK_IMG");
        public final static Property BookName = new Property(2, String.class, "bookName", false, "BOOK_NAME");
        public final static Property BookAuthor = new Property(3, String.class, "bookAuthor", false, "BOOK_AUTHOR");
        public final static Property BookPubdate = new Property(4, String.class, "bookPubdate", false, "BOOK_PUBDATE");
        public final static Property BookPrice = new Property(5, float.class, "bookPrice", false, "BOOK_PRICE");
        public final static Property Isbn13 = new Property(6, String.class, "isbn13", false, "ISBN13");
        public final static Property BookPublisher = new Property(7, String.class, "bookPublisher", false, "BOOK_PUBLISHER");
    }


    public BookDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_DAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BOOK_IMG\" TEXT," + // 1: bookImg
                "\"BOOK_NAME\" TEXT," + // 2: bookName
                "\"BOOK_AUTHOR\" TEXT," + // 3: bookAuthor
                "\"BOOK_PUBDATE\" TEXT," + // 4: bookPubdate
                "\"BOOK_PRICE\" REAL NOT NULL ," + // 5: bookPrice
                "\"ISBN13\" TEXT," + // 6: isbn13
                "\"BOOK_PUBLISHER\" TEXT);"); // 7: bookPublisher
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookImg = entity.getBookImg();
        if (bookImg != null) {
            stmt.bindString(2, bookImg);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(3, bookName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(4, bookAuthor);
        }
 
        String bookPubdate = entity.getBookPubdate();
        if (bookPubdate != null) {
            stmt.bindString(5, bookPubdate);
        }
        stmt.bindDouble(6, entity.getBookPrice());
 
        String isbn13 = entity.getIsbn13();
        if (isbn13 != null) {
            stmt.bindString(7, isbn13);
        }
 
        String bookPublisher = entity.getBookPublisher();
        if (bookPublisher != null) {
            stmt.bindString(8, bookPublisher);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookImg = entity.getBookImg();
        if (bookImg != null) {
            stmt.bindString(2, bookImg);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(3, bookName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(4, bookAuthor);
        }
 
        String bookPubdate = entity.getBookPubdate();
        if (bookPubdate != null) {
            stmt.bindString(5, bookPubdate);
        }
        stmt.bindDouble(6, entity.getBookPrice());
 
        String isbn13 = entity.getIsbn13();
        if (isbn13 != null) {
            stmt.bindString(7, isbn13);
        }
 
        String bookPublisher = entity.getBookPublisher();
        if (bookPublisher != null) {
            stmt.bindString(8, bookPublisher);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookDaoBean readEntity(Cursor cursor, int offset) {
        BookDaoBean entity = new BookDaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookImg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookAuthor
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bookPubdate
            cursor.getFloat(offset + 5), // bookPrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isbn13
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // bookPublisher
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookDaoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookPubdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookPrice(cursor.getFloat(offset + 5));
        entity.setIsbn13(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBookPublisher(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookDaoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookDaoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookDaoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
